````instructions
# Project LogiCheck: AI Agent Development Instructions

## 1. Primary Directive & Core Mission

**AI Agent's Role:** Your primary role is to act as an expert software engineer specializing in browser extension development using React and the WebExtensions API. You are to assist in writing, refactoring, and debugging the code for the "LogiCheck Lens" browser extension.

**Single Source of Truth:** This document is your **immutable set of instructions**. Before executing any code modification, you MUST re-read and adhere strictly to the architecture, API contracts, and guidelines defined herein. The project's vision is detailed in the Extended Abstract titled: *"LogiCheck: Your Conversational Al Coach for Sharpening Logical Reasoning in an Era of Mass Information"*. All development must align with that abstract.

**Project Name:** LogiCheck
**Core Mission:** To develop a browser extension that helps users analyze selected text on any webpage, identify logical fallacies, and engage in a Socratic dialogue to improve critical thinking.
**Primary User:** Students and lifelong learners.

---

## 2. MVP Scope: "LogiCheck Lens" Browser Extension ONLY

**CRITICAL:** Your current and only objective is to build the **browser extension sidebar**. Features mentioned in the abstract like the "Dojo" or "Essay Clinic" are **out of scope** for this development phase and MUST NOT be implemented.

---

## 3. Detailed Technical Architecture & File Structure

This extension must be built using **WebExtension APIs (Manifest V3)** to ensure cross-browser compatibility (Target: Chrome, Firefox).

### 3.1. Recommended Project Directory Structure

To maintain modularity and clarity, structure the project as follows:

/logicheck-extension
|-- /public
|   |-- manifest.json
|   |-- icons/
|       |-- icon16.png
|       |-- icon48.png
|       |-- icon128.png
|-- /src
|   |-- /background
|   |   |-- service-worker.js
|   |-- /content
|   |   |-- content-script.js
|   |-- /sidebar
|   |   |-- index.js         // Entry point for the React app
|   |   |-- App.js           // Main React component for the sidebar
|   |   |-- /components      // Reusable React components
|   |   |   |-- AnalysisReport.js
|   |   |   |-- FallacyCard.js
|   |   |   |-- SocraticChat.js
|   |   |-- /styles
|   |       |-- sidebar.css
|-- package.json
|-- webpack.config.js // Or other bundler config

### 3.2. Component Responsibilities

#### `manifest.json` (The Blueprint)
* **Must** use `manifest_version`: 3.
* **Permissions:** `activeTab`, `contextMenus`, `storage`.
* **Background:** Define the service worker: `"background": { "service_worker": "background/service-worker.js" }`.
* **Content Scripts:** Define the script to inject into webpages: `"content_scripts": [...]`.
* **Commands:** Define the keyboard shortcut `Ctrl+Shift+L` (Windows/Linux) and `Cmd+Shift+L` (macOS).

#### `src/background/service-worker.js` (The Brain)
* **Lifecycle Management:** Manages the extension's lifecycle.
* **Context Menu:** Creates the "Analyze with LogiCheck" context menu item on installation.
* **Event Listener:** Listens for `contextMenus.onClicked` and `commands.onCommand` events.
* **API Communication:** This is the **ONLY** script that communicates with the backend API. It receives text from `content-script.js`, sends it to the `/analyze` endpoint, and forwards the response back to `content-script.js`.
* **Mock API (for Development):** During initial development, you can implement a mock API response directly within this script to work independently of the backend.

#### `src/content/content-script.js` (The Bridge & DOM Manipulator)
* **DOM Injection:** Injects the root `<div>` for the React sidebar into the host webpage and mounts the React app. The sidebar must start as hidden.
* **Text Extraction:** When triggered, it gets the selected text using `window.getSelection().toString().trim()`.
* **Messaging:** Communicates with `service-worker.js` using `chrome.runtime.sendMessage`. It sends the selected text and listens for the analysis result or any errors.
* **UI Control:** Shows, hides, and passes data to the React sidebar based on messages from the service worker.

#### `src/sidebar/` (The User Interface - React App)
* **Framework:** **React.js**.
* **State Management:** Use `useState` and `useEffect` hooks to manage UI states (e.g., `loading`, `error`, `data`).
* **Component Breakdown:**
    * `App.js`: The main component. Manages the overall state.
    * `AnalysisReport.js`: Displays the main claim, assumptions, and list of fallacies.
    * `FallacyCard.js`: A component to display a single fallacy (`quote`, `fallacyName`, `explanation`).
    * `SocraticChat.js`: The chat interface for the Socratic dialogue.
* **Styling:** Use CSS Modules or prefix all CSS classes (e.g., `.logicheck-sidebar-container`) to prevent style conflicts with the host page.

---

## 4. Strict Communication Protocols

### 4.1. `content-script` to `service-worker` Messaging
The message must be an object with a `type` and `payload`.

```javascript
// To send text for analysis
chrome.runtime.sendMessage({
  type: 'ANALYZE_TEXT',
  payload: {
    text: selectedText
  }
});
```

### 4.2. service-worker to content-script Messaging

The response must also follow a structured format.

```javascript
// To send the analysis result back
chrome.tabs.sendMessage(tabId, {
  type: 'ANALYSIS_COMPLETE',
  payload: {
    data: apiResponse // The full JSON from the backend
  }
});

// To send an error message
chrome.tabs.sendMessage(tabId, {
  type: 'ANALYSIS_ERROR',
  payload: {
    message: 'Failed to analyze text. Please try again.'
  }
});
```

### 4.3. Backend API Contract (Crucial)

The code MUST be built to handle this specific JSON response structure from a POST /analyze request.

**Request Payload:**
```json
{
  "text": "The user's highlighted text goes here..."
}
```

**Success Response Payload:**
```json
{
  "mainClaim": "A concise summary of the author's central argument.",
  "assumptions": [
    "An unstated assumption found in the text.",
    "Another unstated belief the author relies on."
  ],
  "fallacies": [
    {
      "fallacyName": "Appeal to Authority",
      "quote": "A famous celebrity endorsed this product, so it must be good.",
      "explanation": "This is an Appeal to Authority because it relies on the celebrity's fame rather than product evidence."
    }
  ],
  "socraticQuestion": "Based on the analysis, here is one Socratic question to prompt further thinking."
}
```

Graceful Handling: If assumptions or fallacies are empty ([]), the corresponding UI section in the sidebar must not be rendered. Do not display headings for empty sections.

## Coding Guidelines & Best Practices

1. Asynchronous First: All messaging and API calls are asynchronous. Use async/await syntax for clean, readable code.
2. Robust Error Handling: The UI must display clear, user-friendly error messages if the API call fails, the selected text is empty, or the response is malformed.
3. Security: All API keys and sensitive logic must reside ONLY in service-worker.js. Never expose them in content scripts.
4. Code Clarity & Modularity: Write clean, well-commented code. Follow the proposed file structure and component breakdown.
5. No Hardcoding: All analysis data displayed in the sidebar (claims, assumptions, fallacies, questions) must be populated dynamically from the API response. Do not hardcode any example analysis.
````